<?php

namespace Ordr\DataBundle\Entity;

use \Doctrine\ORM\NoResultException;
use Doctrine\ORM\EntityRepository;

/**
 * OrdrRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdrRepository extends EntityRepository
{
  public function findBySessionAndToken($session, $token)
  {
    $em = $this->getEntityManager();

    $query = $em->createQuery(
      '
      SELECT o, m from
        OrdrDataBundle:Ordr o
      JOIN o.ordr m
      WHERE o.session = :session AND m.token = :token'
    );
    $query->setParameter('session', $session);
    $query->setParameter('token', $token);
    $ordrs = $query->getResult();

    return $ordrs;
  }

  public function findByTokenExcludeSession($token, $session)
  {
    $em = $this->getEntityManager();

    $query = $em->createQuery(
      '
        SELECT o, m from
          OrdrDataBundle:Ordr o
        JOIN o.ordr m
        WHERE o.session <> :session AND m.token = :token'
    );
    $query->setParameter('session', $session);
    $query->setParameter('token', $token);
    $ordrs = $query->getResult();

    return $ordrs;
  }

  public function findBySessionTokenAndId($session, $token, $id)
  {
    $em = $this->getEntityManager();

    $query = $em->createQuery(
      '
        SELECT o, m from
          OrdrDataBundle:Ordr o
        JOIN o.ordr m
        WHERE o.id = :id AND o.session = :session AND m.token = :token'
    );
    $query->setParameter('session', $session);
    $query->setParameter('token', $token);
    $query->setParameter('id', $id);
    try {
      $ordr = $query->getSingleResult();
    }
    catch (NoResultException $e) {
      return null;
    }

    return $ordr;
  }

  public function findByTokenAdminTokenAndId($token, $adminToken, $id)
  {
    $em = $this->getEntityManager();

    $query = $em->createQuery(
      '
        SELECT o, m from
          OrdrDataBundle:Ordr o
        JOIN o.ordr m
        WHERE o.id = :id AND m.admin_token = :adminToken AND m.token = :token'
    );
    $query->setParameter('token', $token);
    $query->setParameter('adminToken', $adminToken);
    $query->setParameter('id', $id);
    $ordr = $query->getSingleResult();

    return $ordr;
  }

  public function findAllExtraLikeByToken($token, $extraStartsWith) {
    $em = $this->getEntityManager();

    $query = $em->createQuery(
      '
        SELECT DISTINCT o.extra, o.price FROM
          OrdrDataBundle:Ordr o
        JOIN o.ordr m
        WHERE m.token = :token AND o.extra like :extraStartsWith
      '
    );
    $query->setParameter('token', $token);
    $query->setParameter('extraStartsWith', '%'.$extraStartsWith.'%');

    return $query->getResult();
  }
}